{"version":3,"sources":["main/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["socket","io","Home","props","getData","started","console","log","setState","changeGameState","emit","state","on","this","off","Fragment","onClick","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQASMA,EAASC,eAiDAC,E,kDA9CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAMVC,QAAU,SAAAC,GACRC,QAAQC,IAAI,aAAeF,GAC3B,EAAKG,SAAS,CAAEH,aATC,EAYnBI,gBAAkB,SAAAJ,GAChBC,QAAQC,IAAI,6BAA8BF,GAC1CL,EAAOU,KAAK,oBAAqBL,GACjC,EAAKG,SAAS,CAAEH,aAbd,EAAKM,MAAQ,CACTN,SAAS,GAHE,E,qDAkBnB,WAEEL,EAAOU,KAAK,eAAgB,oBAE5BV,EAAOY,GAAG,WAHUC,KAGgBT,W,kCAGtC,WACEJ,EAAOc,IAAI,WAAYD,KAAKT,W,oBAG9B,WAAU,IAAD,OACP,OACE,eAAC,IAAMW,SAAP,WACE,wBAAQC,QAAS,kBAAM,EAAKP,iBAAgB,IAA5C,yBAGA,wBAAQO,QAAS,kBAAM,EAAKP,iBAAgB,IAA5C,wBAGA,6BACGI,KAAKF,MAAMN,QAAU,UAAY,uB,GAxC3BY,aCEJC,E,4JARb,WACE,OACE,qBAAKC,UAAY,MAAjB,SACE,cAAC,EAAD,U,GAJUF,aCQHG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.78c288c3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport openSocket from \"socket.io-client\";\r\n\r\n// running locally\r\n//import openSocket, from \"socket.io-client\";\r\n//const socket = openSocket('http://localhost:3001', {transports: ['websocket']});\r\n\r\n// deploy \r\nimport { io } from \"socket.io-client\";\r\nconst socket = io();\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            started: false,\r\n        }; \r\n    }\r\n\r\n    getData = started => {\r\n      console.log('get data: ' + started);\r\n      this.setState({ started });\r\n    }\r\n\r\n    changeGameState = started => {\r\n      console.log(\"change game state clicked \", started);\r\n      socket.emit(\"change_game_state\", started);\r\n      this.setState({ started });\r\n    }\r\n\r\n    componentDidMount() {\r\n      var state_current = this;\r\n      socket.emit(\"initial_data\", \"test, test, test\");\r\n      // start listener for retrieving data\r\n      socket.on(\"get_data\", state_current.getData);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      socket.off(\"get_data\", this.getData);\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <React.Fragment>\r\n          <button onClick={() => this.changeGameState(true)}>\r\n            Start Game!\r\n          </button>\r\n          <button onClick={() => this.changeGameState(false)}>\r\n            Reset Game\r\n          </button>\r\n          <h2>\r\n            {this.state.started ? 'started' : 'not started'}\r\n          </h2>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default Home;","import './App.css';\r\nimport { Component } from 'react';\r\nimport Home from './main/Home'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className = \"App\">\r\n        <Home />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}